// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  address  String    @unique
  votes    Vote[]
  passport Passport?
  poaps    Poap[]
  Arkham   Arkham[]
}

model Arkham {
  id                Int     @id @default(autoincrement())
  address           String
  chain             String
  entity_name       String?
  entity_note       String?
  entity_id         String?
  entity_type       String?
  entity_service    String?
  entity_addresses  Json?
  entity_website    String?
  entity_twitter    String?
  entity_crunchbase String?
  entity_linkedin   String?

  label_name      String?
  label_address   String?
  label_chainType String?
  contract        Boolean
  isUserAddress   Boolean

  user User @relation(fields: [address], references: [address])

  @@unique([address, chain], name: "uid")
}

model Passport {
  id             Int    @id @default(autoincrement())
  userAddress    String @unique
  score          Float
  scoreThreshold Float
  scoreTimestamp BigInt
  user           User   @relation(fields: [userAddress], references: [address])
  updatedAt      Int
  stamps         Json?
}

model Stamp {
  id         Int       @id @default(autoincrement())
  address    String
  provider   String
  stamp      Json
  created_at DateTime?
  updated_at DateTime?
}

model UserHistory {
  id               Int      @id @default(autoincrement())
  wallet           String
  direction        String
  block_number     BigInt
  block_time       DateTime
  tx_hash          String
  neighbor_address String
  symbol           String   @default("")
  token_amount     Float    @default(0)
  chain            String
}

model UserTx {
  id                Int      @id @default(autoincrement())
  timestamp         DateTime
  block             BigInt
  status            String
  method            String?
  hash              String
  value             String
  // token_transfers
  toName            String   @default("")
  fromName          String   @default("")
  to                String
  from              String
  mainAddress       String?
  gasUsed           BigInt
  nonce             Int
  chainId           Int
  internalTxIndexed Boolean  @default(false)

  @@unique([hash, nonce, from, chainId], name: "uid")
}

model UserInternalTx {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime
  block       BigInt
  success     Boolean  @default(false)
  hash        String
  type        String
  value       String
  from        String
  to          String
  fromName    String   @default("")
  toName      String   @default("")
  mainAddress String?
  gasLimit    Int
  chainId     Int

  @@unique([hash, to, from, chainId], name: "uid")
}

model Poap {
  id          Int      @id @default(autoincrement())
  poapId      Int
  fancy_id    String
  name        String
  event_url   String
  image_url   String
  country     String
  city        String
  description String
  year        Int
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  expiry_date DateTime @db.Date
  supply      Int
  tokenId     String
  owner       String
  chain       String
  created     DateTime
  poapOwner   User     @relation(fields: [owner], references: [address])

  @@unique([fancy_id, owner, tokenId], name: "uid")
}

model Program {
  id             Int     @id @default(autoincrement())
  programAddress String  @unique
  Rounds         Round[]
}

model Round {
  id                     Int                    @id @default(autoincrement())
  amountUSD              Int
  votes                  Int
  token                  String
  matchAmount            String
  matchAmountUSD         Float
  uniqueContributors     Int
  applicationMetaPtr     String
  applicationMetadata    Json
  metaPtr                String
  metadata               Json
  applicationsStartTime  BigInt
  applicationsEndTime    BigInt
  roundStartTime         BigInt
  roundEndTime           BigInt
  createdAt              BigInt                 @default(0)
  updatedAt              BigInt                 @default(0)
  createdAtBlock         Int
  updatedAtBlock         Int
  // user generated fields
  addedLastApplications  Boolean                @default(false)
  addedLastVotes         Boolean                @default(false)
  chainId                Int
  roundId                String
  programContractAddress String?
  program                Program?               @relation(fields: [programContractAddress], references: [programAddress])
  projects               ApplicationsInRounds[]
  Vote                   Vote[]
  MatchingDistribution   MatchingDistribution[]

  @@unique([chainId, roundId], name: "uid")
}

model ApplicationsInRounds {
  // id                  String  @unique
  roundId             Int
  projectId           Int
  applicationId       Int
  status              String
  amountUSD           Float
  votes               Int
  payoutAddress       String
  uniqueContributors  Int
  project_name        String
  project_desc        String
  project_website     String
  user_github         String?
  project_github      String?
  applicationMetadata Json?
  transaction         String
  tx_gasPrice         BigInt?
  tx_gasSpent         BigInt?
  round               Round   @relation(fields: [roundId], references: [id])
  project             Project @relation(fields: [projectId], references: [id])

  @@id([roundId, projectId, applicationId])
}

model Project {
  id         Int                    @id @default(autoincrement())
  projectKey String                 @unique
  rounds     ApplicationsInRounds[]
  votes      Vote[]
}

model Vote {
  id               Int     @id @default(autoincrement())
  voteId           String?
  transaction      String
  blockNumber      Int
  projectId        Int
  chainId          Int
  project          Project @relation(fields: [projectId], references: [id])
  applicationId    String?
  roundId          Int
  round            Round   @relation(fields: [roundId], references: [id])
  voter            String
  voterUser        User    @relation(fields: [voter], references: [address])
  grantAddress     String
  token            String
  amount           String
  amountUSD        Float
  amountRoundToken String
  tx_gasPrice      BigInt  @default(0)
  tx_gasSpent      BigInt  @default(0)
  tx_timestamp     BigInt  @default(0)

  @@unique([transaction, roundId, projectId], name: "uid")
}

model MatchingDistribution {
  id                            Int     @id @default(autoincrement())
  contributionsCount            Int
  projectPayoutAddress          String
  applicationId                 Int
  projectId                     String
  matchPoolPercentage           Float
  projectName                   String
  matchAmountInTokenHex         String
  matchAmountInToken            String
  originalMatchAmountInTokenHex String
  originalMatchAmountInToken    String
  matchAmountUSD                Float?
  originalMatchAmountUSD        Float?
  index                         Int
  chainId                       Int
  roundKey                      Int
  roundId                       String?
  round                         Round   @relation(fields: [roundKey], references: [id])

  @@unique([projectName, projectId, applicationId, matchPoolPercentage, contributionsCount], name: "uid")
}

model EthStaker {
  id        Int      @id @default(autoincrement())
  wallet    String
  symbol    String
  token     String
  balance   Decimal  @db.Decimal
  timestamp DateTime

  @@unique([wallet, token], name: "uid")
}

model Erc20TransferHistory {
  id                 Int      @id @default(autoincrement())
  token_name         String
  token_symbol       String
  token_decimals     Int
  from_address       String
  from_address_label String?
  to_address         String
  to_address_label   String?
  address            String
  block_hash         String
  block_number       Int
  block_timestamp    DateTime
  transaction_hash   String
  transaction_index  Int
  log_index          Int
  value              Decimal  @db.Decimal
  possible_spam      Boolean
  value_decimal      Decimal  @db.Decimal
  verified_contract  Boolean
  chainId            Int

  @@unique([from_address, to_address, address, log_index, block_number], name: "uid")
}

model NftTransferHistory {
  id                  Int      @id @default(autoincrement())
  block_number        Int
  block_timestamp     DateTime
  block_hash          String
  transaction_hash    String
  transaction_index   Int
  log_index           Int
  value               Decimal  @db.Decimal
  contract_type       String
  transaction_type    String
  token_address       String
  token_id            String
  from_address        String
  from_address_label  String?
  to_address          String
  to_address_label    String?
  amount              Int
  verified            Int
  operator            String?
  possible_spam       Boolean
  verified_collection Boolean
  chainId             Int

  @@unique([from_address, to_address, token_address, log_index, block_number, chainId], name: "uid")
}

// model NftBalance {
//   id                  Int      @id @default(autoincrement())
//   amount              Int
//   token_id            String
//   token_address       String
//   contract_type       String
//   owner_of            String
//   last_metadata_sync  DateTime
//   last_token_uri_sync DateTime
//   metadata            Json?
//   block_number        Int
//   block_number_minted Int
//   name                String
//   symbol              String
//   token_hash          String
//   token_uri           String
//   minter_address      String
//   verified_collection Boolean
//   possible_spam       Boolean
//   chainId             Int

//   @@unique([token_id, token_address, owner_of, chainId], name: "uid")
// }
